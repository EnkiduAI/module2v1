/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
	id 'eclipse'
	id 'eclipse-wtp'
	
}


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

sourceSets {
  main {
    java { srcDirs 'src/main/java' }
  }
  test{
  	java { srcDirs 'src/main/test' }
  }
}

dependencies {
    // Use JUnit Jupiter for testing.   
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.1.0'
	testImplementation 'org.springframework:spring-test:5.3.13'


	

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation 'mysql:mysql-connector-java:8.0.27'
    implementation 'org.springframework:spring-core:5.3.14'
  implementation 'org.springframework:spring-beans:5.3.14'
  implementation 'org.springframework:spring-context:5.3.14'
  implementation 'org.springframework:spring-jdbc:5.3.14'
  implementation project(':domen')
  implementation project(':dao')
  
}

tasks.named('test'){
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}